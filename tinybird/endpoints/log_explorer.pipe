TOKEN read_pipes READ

NODE cummulative_rows
DESCRIPTION >
    Filter data and calculate the running sum of rows in the result set to determine the time range.

SQL >
%
    SELECT 
        start_ts,
        end_ts,
        sum(n_rows) as rows,
        sum(n_rows) OVER (ORDER BY start_ts 
        {% if defined(order) and order != '' %}
            {% if order == 'asc' %}
                ASC
            {% else %}
                DESC
            {% end %}
        {% else %}
            DESC
        {% end %}) as _n_rows,
        _n_rows - rows as previous_cum_sum
    from (
    SELECT start_ts, end_ts, countMerge(n_rows) AS n_rows
    FROM logs_range_15m
    WHERE 1=1
        {% if defined(tenant_name) and tenant_name != [''] %}
            AND tenant_name in {{ Array(tenant_name) }}
        {% end %}
        AND start_ts >= {{ DateTime(start_date, '2025-02-02 00:00:00') }}
        AND end_ts <= {{ DateTime(end_date, '2025-02-04 00:00:00') }}
        group by start_ts, end_ts
    )
    group by start_ts, end_ts, n_rows
    ORDER BY end_ts 
    {% if defined(order) and order != '' %}
        {% if order == 'asc' %}
            ASC
        {% else %}
            DESC
        {% end %}
    {% else %}
        DESC
    {% end %}



NODE min_ts_range
SQL >
%
with {{ Int32(page, 0)* Int32(page_size, 10) }} as page_start
SELECT *
    FROM cummulative_rows
    WHERE _n_rows >= page_start
    order by _n_rows asc
    limit 1

NODE max_ts_range
SQL >
%
with {{ (Int32(page, 0) + 1) * Int32(page_size, 10) }} as page_end
    SELECT *
    FROM cummulative_rows
    WHERE _n_rows >= page_end
    order by _n_rows asc
    limit 1


    


NODE logs_result
DESCRIPTION >
    Rreturn the logs within the time range.
    NOTE: this does not guarantee that you get the exact page size. To avoid repeating records, you need to add extra conditions to check the last value on the previous page.

SQL >

%
    WITH
        {% if defined(order) and order != '' %}
            {% if order == 'asc' %}
                (SELECT start_ts FROM min_ts_range) AS start_range,
                (SELECT end_ts FROM max_ts_range) AS end_range,
                (SELECT ifNull(previous_cum_sum, 0) FROM min_ts_range) AS previous
            {% else %}
                (SELECT start_ts FROM max_ts_range) AS start_range,
                (SELECT end_ts FROM min_ts_range) AS end_range,
                (SELECT ifNull(previous_cum_sum, 0) FROM min_ts_range) AS previous
            {% end %}
        {% else %}
            (SELECT start_ts FROM max_ts_range) AS start_range,
            (SELECT end_ts FROM min_ts_range) AS end_range,
            (SELECT ifNull(previous_cum_sum, 0) FROM min_ts_range) AS previous
        {% end %}

    SELECT 
        timestamp,
        log_id,
        tenant_name,
        client_name,
        user_name,
        user_agent,
        hostname,
        description,
        connection,
        strategy,
        strategy_type,
        data
    FROM logs
    WHERE 1=1
        {% if defined(tenant_name) and tenant_name != [''] %}
            AND tenant_name in {{Array(tenant_name)}}
        {% end %}
        {% if defined(client_name) and client_name != [''] %}
            AND client_name in {{Array(client_name)}}
        {% end %}
        {% if defined(user_name) and user_name != [''] %}
            AND user_name in {{Array(user_name)}}
        {% end %}
        {% if defined(user_agent) and user_agent != [''] %}
            AND user_agent in {{Array(user_agent)}}
        {% end %}
        {% if defined(hostname) and hostname != [''] %}
            AND hostname in {{Array(hostname)}}
        {% end %}
        {% if defined(description) and description != [''] %}
            AND description in {{Array(description)}}
        {% end %}
        {% if defined(connection) and connection != [''] %}
            AND connection in {{Array(connection)}}
        {% end %}   
        {% if defined(strategy) and strategy != [''] %}
            AND strategy in {{Array(strategy)}}
        {% end %}
        {% if defined(strategy_type) and strategy_type != [''] %}
            AND strategy_type in {{Array(strategy_type)}}
        {% end %}
        AND timestamp >= start_range
        AND timestamp <= end_range
    ORDER BY timestamp 
    {% if defined(order) and order != '' %}
        {% if order == 'asc' %}
            ASC
        {% else %}
            DESC
        {% end %}
    {% else %}
        DESC
    {% end %}
    LIMIT {{Int32(page_size, 10)}}
    OFFSET {{Int32(page, 0)}} * {{Int32(page_size, 10)}} - assumeNotNull(previous)

TYPE endpoint